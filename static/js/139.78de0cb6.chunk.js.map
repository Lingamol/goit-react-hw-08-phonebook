{"version":3,"file":"static/js/139.78de0cb6.chunk.js","mappings":"mSAiBaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAgBF,EAAAA,EAAAA,IAAYG,EAAAA,IAE5BC,GAAiBC,EAAAA,EAAAA,IAAkB,WAAY,YAarD,OACE,UAAC,KAAD,CAAMC,MAAM,SAASC,EAAE,QAAQC,QAAQ,SAAvC,WACE,SAAC,KAAD,CAASC,GAAI,EAAGC,SAAS,KAAzB,uBAGA,SAAC,KAAD,CAAKC,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAIC,WAAYV,EAA3C,UACE,SAAC,KAAD,CACEW,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAKZC,SA1Ba,SAACC,EAAD,GAA2B,EAAhBC,UAAiB,IACvCL,EAA0BI,EAA1BJ,KAAMC,EAAoBG,EAApBH,MAAOC,EAAaE,EAAbF,SACrBrB,GACEyB,EAAAA,EAAAA,IAAS,CACPN,KAAAA,EACAC,MAAAA,EACAC,SAAAA,IAGL,EAQK,SAWG,gBAAGK,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMN,SAAUI,EAAhB,UACE,UAAC,KAAD,CAAQG,QAAS,EAAGpB,MAAM,aAA1B,WACE,UAAC,KAAD,CAAaqB,YAAaH,EAAOR,MAAQS,EAAQT,KAAjD,WACE,SAAC,KAAD,CAAWY,QAAQ,OAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,OACHf,KAAK,OACLgB,KAAK,OACLC,QAAQ,SACRC,SAAU,SAAAC,GACR,GAAIA,EAAMC,OAAS,GACjB,MAAO,uCAEV,KAGH,SAAC,KAAD,UAAmBZ,EAAOR,WAE5B,UAAC,KAAD,CAAaW,YAAaH,EAAOP,OAASQ,EAAQR,MAAlD,WACE,SAAC,KAAD,CAAWW,QAAQ,QAAnB,4BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHf,KAAK,QACLgB,KAAK,QACLC,QAAQ,YAEV,SAAC,KAAD,UAAmBT,EAAOP,YAE5B,UAAC,KAAD,CAAaU,YAAaH,EAAON,UAAYO,EAAQP,SAArD,WACE,SAAC,KAAD,CAAWU,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHf,KAAK,WACLgB,KAAK,WACLC,QAAQ,SACRC,SAAU,SAAAC,GACR,GAAIA,EAAMC,OAAS,EACjB,MAAO,uCAEV,KAEH,SAAC,KAAD,UAAmBZ,EAAON,cAE3BnB,IACC,SAAC,KAAD,CAAWsC,MAAM,MAAjB,iCAEF,SAAC,KAAD,CACEL,KAAK,SACLM,YAAY,OACZzB,EAAE,OACF0B,UAAWrC,EAJb,0BAlDL,QAiEV,EClHc,SAASsC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAAC7C,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { selecRegError, selecAuthIsLoading } from 'redux/auth/selectors';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n  useColorModeValue,\n  Heading,\n} from '@chakra-ui/react';\nimport { Formik, Field } from 'formik';\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const authError = useSelector(selecRegError);\n  const authIsLoading = useSelector(selecAuthIsLoading);\n\n  const formBackground = useColorModeValue('gray.100', 'gray.700');\n  // const inputBackground = useColorModeValue('grey.500', 'gray.100');\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, email, password } = values;\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n  };\n\n  return (\n    <Flex align=\"center\" h=\"100vh\" flexDir=\"column\">\n      <Heading mb={6} fontSize=\"md\">\n        Register\n      </Heading>\n      <Box p={6} rounded=\"md\" w={64} background={formBackground}>\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          // onSubmit={values => {\n          //   alert(JSON.stringify(values, null, 2));\n          // }}\n          onSubmit={handleSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isInvalid={!!errors.name && touched.name}>\n                  <FormLabel htmlFor=\"name\">Username</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                    validate={value => {\n                      if (value.length > 15) {\n                        return 'Username should be max 15 characters.';\n                      }\n                    }}\n                    // bg={inputBackground}\n                  />\n                  <FormErrorMessage>{errors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.email && touched.email}>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                  />\n                  <FormErrorMessage>{errors.email}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={value => {\n                      if (value.length < 7) {\n                        return 'Password should be over 7 characters.';\n                      }\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                {authError && (\n                  <FormLabel color=\"red\">User already exist</FormLabel>\n                )}\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"teal\"\n                  w=\"full\"\n                  isLoading={authIsLoading}\n                >\n                  Register\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","authError","useSelector","selecRegError","authIsLoading","selecAuthIsLoading","formBackground","useColorModeValue","align","h","flexDir","mb","fontSize","p","rounded","w","background","initialValues","name","email","password","onSubmit","values","resetForm","register","handleSubmit","errors","touched","spacing","isInvalid","htmlFor","as","Input","id","type","variant","validate","value","length","color","colorScheme","isLoading","Register","Helmet"],"sourceRoot":""}