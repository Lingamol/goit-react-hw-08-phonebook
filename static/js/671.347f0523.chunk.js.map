{"version":3,"file":"static/js/671.347f0523.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactList/ContactList.sryled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.Styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","components/ContactFormFormik/ContactFormFormik.styled.jsx","components/ContactFormFormik/ContactFormFormik.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nexport const selectContactsObj = state => state.contacts;\nexport const selectContacts = state => state.contacts.contactList;\nexport const selectFilter = state => state.filters.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contactList, filterContact) => {\n    // console.log('Calculating task count. Now memoized!');\n    // console.log('contactList from selectors', contactList);\n    // console.log('filter', filterContact);\n    const normalizedFilter = filterContact.toLowerCase();\n\n    const visibleContacts = contactList.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n    return visibleContacts ? visibleContacts : [];\n  }\n);\n","import styled from '@emotion/styled';\nexport const List = styled.ul`\n  width: 600px;\n  border: 2px solid blue;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 25px;\n  text-align: left;\n`;\n\nexport const ListItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\nexport const ListItemText = styled.span`\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nexport const ListItemBtn = styled.button`\n  width: 60px;\n  padding: 2px;\n  border-radius: 5px;\n  background-color: #e0626e;\n`;\n","// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { deleteContact } from 'redux/actions';\nimport { deleteContact } from 'redux/contacts/operations ';\nimport {\n  // selectContacts,\n  // selectFilter,\n  selectVisibleContacts,\n} from 'redux/selectors';\nimport {\n  ListItemText,\n  ListItem,\n  List,\n  ListItemBtn,\n} from './ContactList.sryled';\n\n// const getVisibleContacts = (contacts, filterContact) => {\n//   const normalizedFilter = filterContact.toLowerCase();\n\n//   const visibleContacts = contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter)\n//   );\n//   return visibleContacts ? visibleContacts : [];\n// };\n\nconst ContactList = () => {\n  // const contactList = useSelector(selectContacts);\n  // console.log('contactList', contactList);\n  // console.log('filter', filter);\n  // const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  // const visibleContacts = getVisibleContacts(contactList, filter);\n  const visibleContacts = useSelector(selectVisibleContacts);\n  // const visibleContacts = contacts;\n  // console.log('visibleContacts', visibleContacts);\n  const handleDeleteContact = contactId => dispatch(deleteContact(contactId));\n  // if (visibleContacts.length === 0) return;\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <ListItemText>{name}</ListItemText>\n          <ListItemText>{number}</ListItemText>\n          <ListItemBtn onClick={() => handleDeleteContact(id)}>\n            Delete\n          </ListItemBtn>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\nexport default ContactList;\n// onClick={() => onDelContact(id)}\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.exact({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n//   onDelContact: PropTypes.func.isRequired,\n// };\n","import styled from '@emotion/styled';\n// export const FilterWrapper = styled.div`\n//   /* border-radius: 5px;\n//   border: 2px solid blue; */\n// `;\nexport const FilterInputLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const FilterInput = styled.input`\n  margin-top: 10px;\n  width: 150px;\n`;\n","// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FilterInputLabel, FilterInput } from './Filter.Styled';\n// import { setFilter } from 'redux/actions';\nimport { setFilter } from 'redux/filters/filtersSlice';\nimport { selectFilter } from 'redux/selectors';\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const onFilterChange = value => dispatch(setFilter(value));\n  return (\n    <FilterInputLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        onChange={event => {\n          onFilterChange(event.target.value);\n        }}\n        value={filter}\n      />\n    </FilterInputLabel>\n  );\n};\nexport default Filter;\n\n// Filter.propTypes = {\n//   filter: PropTypes.string.isRequired,\n//   onFilterContact: PropTypes.func.isRequired,\n// };\n","import styled from '@emotion/styled';\nexport const Container = styled.div`\n  text-align: center;\n  @media screen and (min-width: 320px) {\n    width: 320px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 1280px;\n  }\n`;\nexport const AppTitle = styled.h1`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\nexport const AppContactsListTitle = styled.h2`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormContact = styled(Form)`\n  width: 230px;\n  height: auto;\n  margin-left: auto;\n  margin-right: auto;\n  border: 2px solid blue;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  /* align-items: center; */\n`;\nexport const FormInputLabel = styled.label`\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const FormInput = styled(Field)`\n  margin-top: 5px;\n`;\n\nexport const FormBtn = styled.button`\n  width: 100px;\n  padding: 5px;\n  border-radius: 5px;\n  border: none;\n  background-color: #29cec6;\n`;\nexport const FormErrorMessage = styled.div`\n  color: red;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from 'redux/actions';\nimport { addContact } from 'redux/contacts/operations ';\nimport { Formik, ErrorMessage } from 'formik';\nimport { selectContacts } from 'redux/selectors';\nimport shortid from 'shortid';\nimport * as yup from 'yup';\nimport {\n  FormContact,\n  FormInputLabel,\n  FormInput,\n  FormBtn,\n  FormErrorMessage,\n} from './ContactFormFormik.styled';\n\nconst ContactFormFormik = () => {\n  const nameInpuId = shortid.generate();\n  const numberInputId = shortid.generate();\n  const initialValues = { name: '', number: '' };\n  const contactList = useSelector(selectContacts);\n  // console.log('contactList in form', contactList);\n  const dispatch = useDispatch();\n\n  const handleOnSubmit = (values, { resetForm }) => {\n    // console.log('values', values);\n    // console.log('actions', actions);\n    const { name, number } = values;\n    if (\n      contactList.find(\n        contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    // dispatch(addContact({ name, number }));\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .max(20)\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: yup\n      .string()\n      .max(10)\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleOnSubmit}\n    >\n      <FormContact>\n        <FormInputLabel htmlFor={nameInpuId}>\n          Name\n          <FormInput type=\"text\" name=\"name\" placeholder=\"Enter name\" />\n          <ErrorMessage name=\"name\" component={FormErrorMessage} />\n        </FormInputLabel>\n        <FormInputLabel htmlFor={numberInputId}>\n          Number\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter phone number\"\n          />\n          <ErrorMessage name=\"number\" component={FormErrorMessage} />\n        </FormInputLabel>\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </FormContact>\n    </Formik>\n  );\n};\n\nexport default ContactFormFormik;\n// ContactFormFormik.propTypes = { onSubmit: PropTypes.func.isRequired };\n","import ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n// import { nanoid } from 'nanoid';\nimport { Container, AppTitle, AppContactsListTitle } from './Contacts.styled';\nimport ContactFormFormik from 'components/ContactFormFormik/ContactFormFormik';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations ';\nimport { selectContactsObj } from 'redux/selectors';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n\n  // Получаем части состояния\n  const { contactList, isLoading, error } = useSelector(selectContactsObj);\n  // Вызываем операцию\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <AppTitle>Phonebook</AppTitle>\n      {/* <ContactForm onSubmit={heandleSubmitForm} /> */}\n      <ContactFormFormik />\n      <AppContactsListTitle>Contacts</AppContactsListTitle>\n      <Filter />\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      {contactList.length > 0 && <ContactList />}\n    </Container>\n  );\n};\nexport default Contacts;\n"],"names":["selectContactsObj","state","contacts","selectContacts","contactList","selectFilter","filters","filter","selectVisibleContacts","createSelector","filterContact","normalizedFilter","toLowerCase","visibleContacts","contact","name","includes","List","styled","ListItem","ListItemText","ListItemBtn","dispatch","useDispatch","useSelector","map","id","number","onClick","contactId","deleteContact","FilterInputLabel","FilterInput","type","onChange","event","value","target","setFilter","Container","AppTitle","AppContactsListTitle","FormContact","Form","FormInputLabel","FormInput","Field","FormBtn","FormErrorMessage","nameInpuId","shortid","numberInputId","schema","yup","shape","max","matches","required","initialValues","validationSchema","onSubmit","values","resetForm","find","toLocaleLowerCase","alert","addContact","htmlFor","placeholder","component","Contacts","isLoading","error","useEffect","fetchContacts","length"],"sourceRoot":""}