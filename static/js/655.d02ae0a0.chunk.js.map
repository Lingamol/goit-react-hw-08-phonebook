{"version":3,"file":"static/js/655.d02ae0a0.chunk.js","mappings":"qSAkBaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAgBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC5BC,GAAiBC,EAAAA,EAAAA,IAAkB,WAAY,YAYrD,OACE,UAAC,KAAD,CAAMC,MAAM,SAASC,EAAE,QAAQC,QAAQ,SAAvC,WACE,SAAC,KAAD,CAASC,GAAI,EAAGC,SAAS,KAAzB,oBAGA,SAAC,KAAD,CAAKC,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAIC,WAAYV,EAA3C,UACE,SAAC,KAAD,CACEW,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAKdC,SAzBa,SAACC,EAAD,GAA2B,EAAhBC,UAAiB,IACvCL,EAAoBI,EAApBJ,MAAOC,EAAaG,EAAbH,SACfpB,GACEyB,EAAAA,EAAAA,IAAM,CACJN,MAAAA,EACAC,SAAAA,IAGL,EAQK,SAWG,gBAAGM,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMN,SAAUI,EAAhB,UACE,UAAC,KAAD,CAAQG,QAAS,EAAGpB,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAWqB,QAAQ,QAAnB,4BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,eAGZ,UAAC,KAAD,CAAaC,YAAaV,EAAOP,UAAYQ,EAAQR,SAArD,WACE,SAAC,KAAD,CAAWU,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,GACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,QAAQ,SACRE,SAAU,SAAAC,GACR,GAAIA,EAAMC,OAAS,EACjB,MAAO,uCAEV,KAEH,SAAC,KAAD,UAAmBb,EAAOP,WACzBlB,IACC,UAAC,KAAD,CAAWuC,MAAM,MAAjB,wCAC8B,UAWrB,KACb,SAAC,KAAD,CACEN,KAAK,SACLO,YAAY,OACZ1B,EAAE,OACF2B,UAAWtC,EAJb,uBA1CL,QAyDV,E,SC3GYuC,E,OAAYC,EAAAA,IAAH,sDCGP,SAASC,IACtB,OACE,UAACF,EAAD,YACE,SAACG,EAAA,EAAD,WACE,wCAEF,SAAChD,EAAD,MAGL,C","sources":["components/LoginForm/LoginForm.js","pages/Login/Login.styled.jsx","pages/Login/Login.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { selecLogError, selecAuthIsLoading } from 'redux/auth/selectors';\nimport {\n  Box,\n  Button,\n  // ChakraProvider,\n  // Checkbox,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n  useColorModeValue,\n  Heading,\n} from '@chakra-ui/react';\nimport { Formik, Field } from 'formik';\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const authError = useSelector(selecLogError);\n  const authIsLoading = useSelector(selecAuthIsLoading);\n  const formBackground = useColorModeValue('gray.100', 'gray.700');\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(\n      logIn({\n        email,\n        password,\n      })\n    );\n  };\n\n  return (\n    <Flex align=\"center\" h=\"100vh\" flexDir=\"column\">\n      <Heading mb={6} fontSize=\"md\">\n        Login\n      </Heading>\n      <Box p={6} rounded=\"md\" w={64} background={formBackground}>\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n            rememberMe: false,\n          }}\n          // onSubmit={values => {\n          //   alert(JSON.stringify(values, null, 2));\n          // }}\n          onSubmit={handleSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={value => {\n                      if (value.length < 6) {\n                        return 'Password should be over 7 characters.';\n                      }\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                  {authError && (\n                    <FormLabel color=\"red\">\n                      Incorrect login or password{' '}\n                    </FormLabel>\n                  )}\n                </FormControl>\n                {/* <Field\n                  as={Checkbox}\n                  id=\"rememberMe\"\n                  name=\"rememberMe\"\n                  colorScheme=\"green\"\n                >\n                  Remember me?\n                </Field> */}{' '}\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"teal\"\n                  w=\"full\"\n                  isLoading={authIsLoading}\n                >\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import styled from '@emotion/styled';\nexport const LoginPage = styled.div`\n  /* background: #141e30; */\n`;\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { LoginPage } from './Login.styled';\n\nexport default function Login() {\n  return (\n    <LoginPage>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </LoginPage>\n  );\n}\n"],"names":["LoginForm","dispatch","useDispatch","authError","useSelector","selecLogError","authIsLoading","selecAuthIsLoading","formBackground","useColorModeValue","align","h","flexDir","mb","fontSize","p","rounded","w","background","initialValues","email","password","rememberMe","onSubmit","values","resetForm","logIn","handleSubmit","errors","touched","spacing","htmlFor","as","Input","id","name","type","variant","isInvalid","validate","value","length","color","colorScheme","isLoading","LoginPage","styled","Login","Helmet"],"sourceRoot":""}